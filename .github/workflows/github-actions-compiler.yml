name: PlatformIO CI

on: 
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      - name: setup build flags
        run:
          export PLATFORMIO_BUILD_FLAGS=-DWIFI_SSID='\"'$WIFI_SSID'\"'-DWIFI_PASS='\"'$WIFI_PASS'\"';
          echo $PLATFORMIO_BUILD_FLAGS
        env:
          WIFI_PASS: "${{ vars.TEST_PASS }}" #${{ secrets.WIFI_PASS }}
          WIFI_SSID: "${{ vars.TEST_SSID }}" #${{ secrets.WIFI_SSID }}

      - name: Run PlatformIO
        run: pio run
        env:
          WIFI_PASS: "${{ secrets.WIFI_PASS }}" #${{ secrets.WIFI_PASS }}
          WIFI_SSID: "${{ secrets.WIFI_SSID }}" #${{ secrets.WIFI_SSID }}
          PLATFORMIO_BUILD_FLAGS: -DWIFI_SSID=\"$WIFI_SSID\" -DWIFI_PASS=\"$WIFI_PASS\"
      # - name: Update release
      #   uses: johnwbyrd/update-release@v1.0.0
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     files: ".pio/build/release/firmware.bin"
      #     tag: "pi_pico_w"
          
      # - name: Upload assets to a Release
      #   uses: AButler/upload-release-assets@v3.0
      #   with:
      #     files: ".pio/build/release/firmware.bin"
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     release-tag:  ${{ github.ref_name }}\
      - id: release
        uses: rymndhng/release-on-push-action@master
        with:
          bump_version_scheme: patch
          tag_prefix: v
          dry_run: true


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release.outputs.tag_name }}
          release_name: Release ${{ steps.release.outputs.tag_name }}
          draft: false
          prerelease: false


      - name: Check Output Parameters
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"
          echo "Upload release artifacts to ${{ steps.release.outputs.upload_url }}"


      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: .pio/build/release/firmware.bin
          asset_name: firmware.bin
          asset_content_type: application/octet-stream